{"version":3,"sources":["candy.js"],"names":["Circle","[object Object]","origin","speed","color","angle","context","this","position","renderCount","fillStyle","beginPath","arc","x","y","Math","PI","fill","sin","cos","Boom","circleCount","area","stop","circles","range","length","floor","random","randomArray","start","end","i","circle","randomColor","randomRange","push","forEach","index","width","height","splice","move","draw","CursorSpecialEffects","computerCanvas","document","createElement","renderCanvas","computerContext","getContext","renderContext","globalWidth","window","innerWidth","globalHeight","innerHeight","booms","running","e","boom","clientX","clientY","init","run","style","top","left","zIndex","pointerEvents","body","append","addEventListener","handleMouseDown","bind","handlePageHide","requestAnimationFrame","clearRect","drawImage","cursorSpecialEffects"],"mappings":"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","file":"../js/candy.min.js","sourcesContent":["// Copied from [DIYgod's Hexo Theme Sagiri](https://github.com/DIYgod/diygod.me/blob/master/themes/sagiri/)\n\nclass Circle {\n    constructor({ origin, speed, color, angle, context }) {\n      this.origin = origin\n      this.position = { ...this.origin }\n      this.color = color\n      this.speed = speed\n      this.angle = angle\n      this.context = context\n      this.renderCount = 0\n    }\n  \n    draw() {\n      this.context.fillStyle = this.color\n      this.context.beginPath()\n      this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)\n      this.context.fill()\n    }\n  \n    move() {\n      this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x\n      this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)\n      this.renderCount++\n    }\n  }\n  \n  class Boom {\n    constructor ({ origin, context, circleCount = 10, area }) {\n      this.origin = origin\n      this.context = context\n      this.circleCount = circleCount\n      this.area = area\n      this.stop = false\n      this.circles = []\n    }\n  \n    randomArray(range) {\n      const length = range.length\n      const randomIndex = Math.floor(length * Math.random())\n      return range[randomIndex]\n    }\n  \n    randomColor() {\n      const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n      return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)\n    }\n  \n    randomRange(start, end) {\n      return (end - start) * Math.random() + start\n    }\n  \n    init() {\n      for(let i = 0; i < this.circleCount; i++) {\n        const circle = new Circle({\n          context: this.context,\n          origin: this.origin,\n          color: this.randomColor(),\n          angle: this.randomRange(Math.PI - 1, Math.PI + 1),\n          speed: this.randomRange(1, 6)\n        })\n        this.circles.push(circle)\n      }\n    }\n  \n    move() {\n      this.circles.forEach((circle, index) => {\n        if (circle.position.x > this.area.width || circle.position.y > this.area.height) {\n          return this.circles.splice(index, 1)\n        }\n        circle.move()\n      })\n      if (this.circles.length == 0) {\n        this.stop = true\n      }\n    }\n  \n    draw() {\n      this.circles.forEach(circle => circle.draw())\n    }\n  }\n  \n  class CursorSpecialEffects {\n    constructor() {\n      this.computerCanvas = document.createElement('canvas')\n      this.renderCanvas = document.createElement('canvas')\n  \n      this.computerContext = this.computerCanvas.getContext('2d')\n      this.renderContext = this.renderCanvas.getContext('2d')\n  \n      this.globalWidth = window.innerWidth\n      this.globalHeight = window.innerHeight\n  \n      this.booms = []\n      this.running = false\n    }\n  \n    handleMouseDown(e) {\n      const boom = new Boom({\n        origin: { x: e.clientX, y: e.clientY },\n        context: this.computerContext,\n        area: {\n          width: this.globalWidth,\n          height: this.globalHeight\n        }\n      })\n      boom.init()\n      this.booms.push(boom)\n      this.running || this.run()\n    }\n  \n    handlePageHide() {\n      this.booms = []\n      this.running = false\n    }\n  \n    init() {\n      const style = this.renderCanvas.style\n      style.position = 'fixed'\n      style.top = style.left = 0\n      style.zIndex = '999999999999999999999999999999999999999999'\n      style.pointerEvents = 'none'\n  \n      style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth\n      style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight\n  \n      document.body.append(this.renderCanvas)\n  \n      window.addEventListener('mousedown', this.handleMouseDown.bind(this))\n      window.addEventListener('pagehide', this.handlePageHide.bind(this))\n    }\n  \n    run() {\n      this.running = true\n      if (this.booms.length == 0) {\n        return this.running = false\n      }\n  \n      requestAnimationFrame(this.run.bind(this))\n  \n      this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n      this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n  \n      this.booms.forEach((boom, index) => {\n        if (boom.stop) {\n          return this.booms.splice(index, 1)\n        }\n        boom.move()\n        boom.draw()\n      })\n      this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)\n    }\n  }\n  \n  const cursorSpecialEffects = new CursorSpecialEffects()\n  cursorSpecialEffects.init()"]}