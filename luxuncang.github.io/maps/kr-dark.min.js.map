{"version":3,"sources":["kr-dark.js"],"names":["rootElement","document","documentElement","darkModeStorageKey","rootElementDarkModeAttributeName","darkModeTogglebuttonElement","getElementById","getLS","k","localStorage","getItem","e","getModeFromCSSMediaQuery","window","matchMedia","matches","resetRootDarkModeAttributeAndLS","removeAttribute","removeItem","removeLS","validColorModeKeys","dark","light","applyCustomDarkModeSettings","mode","currentSetting","setAttribute","invertDarkModeObj","toggleCustomDarkMode","v","setItem","setLS","addEventListener"],"mappings":"AAOA,MAGI,MAAMA,EAAcC,SAASC,gBAEvBC,EAAqB,oBAErBC,EAAmC,yBAEnCC,EAA8BJ,SAASK,eAAe,mBA2BtDC,EAASC,IAEX,IACI,OAAOC,aAAaC,QAAQF,GAC9B,MAAOG,GAEL,OAAO,OAOTC,EAA2B,IAEtBC,OAAOC,WAAW,gCAAgCC,QAC3D,OACA,QAMIC,EAAkC,KAEpChB,EAAYiB,gBAAgBb,GApCf,CAACI,IAEd,IACIC,aAAaS,WAAWV,GAC1B,MAAOG,MAkCTQ,CAAShB,IAMPiB,EAAqB,CACvBC,MAAQ,EACRC,OAAS,GAMPC,EAA+BC,IAGjC,MAAMC,EAAiBD,GAAQjB,EAAMJ,GAEjCsB,IAAmBb,IAGnBI,IACOI,EAAmBK,GAG1BzB,EAAY0B,aAAatB,EAAkCqB,GAK3DT,KAIFW,EAAoB,CACtBN,KAAQ,QACRC,MAAS,QAMPM,EAAuB,KAEzB,IAAIH,EAAiBlB,EAAMJ,GAE3B,GAAIiB,EAAmBK,GAGnBA,EAAiBE,EAAkBF,OAChC,CAAA,GAAuB,OAAnBA,EAQhB,OAJSA,EAAiBE,EAAkBf,KAU7C,MAlHgB,EAACJ,EAAGqB,KAEd,IACIpB,aAAaqB,QAAQtB,EAAGqB,GAC1B,MAAOlB,MA4GToB,CAAM5B,EAAoBsB,GAEzBA,GAILF,IAGAlB,EAA4B2B,iBAAiB,SAAS,KAGxDT,EAA4BK,SA1I9B","file":"../js/kr-dark.min.js","sourcesContent":["/*\r\n * 该部分代码采用 CC BY-NC-SA 4.0 许可协议，著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\r\n * 作者：Sukka\r\n * 来源：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持 | Sukka's Blog\r\n * 链接：https://blog.skk.moe/post/hello-darkmode-my-old-friend/\r\n */\r\n\r\n(() => {\r\n\t\r\n\t// <html></html>\r\n    const rootElement = document.documentElement;\r\n\t// 作为 localStorage 的 key\r\n    const darkModeStorageKey = 'user-color-scheme';\r\n\t// 深色模式属性名称\r\n    const rootElementDarkModeAttributeName = 'data-user-color-scheme';\r\n\t// 深色模式切换按钮\r\n    const darkModeTogglebuttonElement = document.getElementById('darkmode-switch');\r\n\r\n\t/**\r\n\t * 设置 LocalStorage 的指定属性\r\n\t */\r\n    const setLS = (k, v) => {\r\n\t\t\r\n        try {\r\n            localStorage.setItem(k, v);\r\n        } catch (e) {\r\n\t\t\t// (此处不进行处理)\r\n\t\t}\r\n    };\r\n\t/**\r\n\t * 移除 LocalStorage 的指定属性\r\n\t */\r\n    const removeLS = (k) => {\r\n\t\t\r\n        try {\r\n            localStorage.removeItem(k);\r\n        } catch (e) {\r\n\t\t\t// (此处不进行处理)\r\n\t\t}\r\n    };\r\n\t/**\r\n\t * 获取 LocalStorage 的指定属性\r\n\t */\r\n    const getLS = (k) => {\r\n\t\t\r\n        try {\r\n            return localStorage.getItem(k);\r\n        } catch (e) {\r\n\t\t\t// 与 localStorage 中没有找到对应 key 的行为一致\r\n            return null;\r\n        }\r\n    };\r\n\t\r\n\t/**\r\n\t * 获取当前生效的显示模式（深色/浅色）名称\r\n\t */\r\n    const getModeFromCSSMediaQuery = () => {\r\n\t\t\r\n        return window.matchMedia('(prefers-color-scheme: dark)').matches \r\n\t\t\t\t? 'dark' \r\n\t\t\t\t: 'light'\r\n    };\r\n\t\r\n\t/**\r\n\t * 初始化 DOM根节点 以及 LocalStorage 的显示模式对应的属性\r\n\t */\r\n    const resetRootDarkModeAttributeAndLS = () => {\r\n\t\t\r\n        rootElement.removeAttribute(rootElementDarkModeAttributeName);\r\n\t\t\r\n        removeLS(darkModeStorageKey);\r\n    };\r\n\r\n\t/**\r\n\t * 校验key\r\n\t */\r\n    const validColorModeKeys = {\r\n        'dark': true,\r\n        'light': true\r\n    };\r\n    \r\n\t/**\r\n\t * 提交指定的深色/浅色显示模式的设置\r\n\t */\r\n    const applyCustomDarkModeSettings = (mode) => {\r\n\t\t\r\n        // 接受从「开关」处传来的模式，或者从 localStorage 读取\r\n        const currentSetting = mode || getLS(darkModeStorageKey);\r\n\t\t\r\n        if (currentSetting === getModeFromCSSMediaQuery()) {\r\n            // 当用户自定义的显示模式和 prefers-color-scheme 相同时重置，恢复到自动模式\r\n\t\t\t\r\n            resetRootDarkModeAttributeAndLS();\r\n        } else if (validColorModeKeys[currentSetting]) {\r\n\t\t\t// (相比 <code>Array#indexOf</code>，这种写法 Uglify 后字节数更少)\r\n\t\t\t\r\n            rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);\r\n        } else {\r\n            // 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 <code>null</code>\r\n            //⤷ 或者 localStorage 被篡改，currentSetting 不是合法值\r\n\t\t\t\r\n            resetRootDarkModeAttributeAndLS();\r\n        }\r\n    };\r\n\r\n    const invertDarkModeObj = {\r\n        'dark': 'light',\r\n        'light': 'dark'\r\n    };\r\n    \r\n\t/**\r\n\t * 切换显示模式（深色/浅色）\r\n\t */\r\n    const toggleCustomDarkMode = () => {\r\n\t\t\r\n        let currentSetting = getLS(darkModeStorageKey);\r\n        \r\n        if (validColorModeKeys[currentSetting]) {\r\n\t\t\t\r\n            // 从 localStorage 中读取模式，并取相反的模式\r\n            currentSetting = invertDarkModeObj[currentSetting];\r\n        } else if (currentSetting === null) {\r\n            // localStorage 中没有相关值，或者 localStorage 抛了 Error\r\n            //⤷ 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\r\n\t\t\t\r\n            currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\r\n        } else {\r\n            // localStorage 中的对应属性🡄非预期异常情况\r\n\t\t\t\r\n\t\t\treturn;\r\n        }\r\n\t\t\r\n        // 将相反的模式写入 localStorage\r\n        setLS(darkModeStorageKey, currentSetting);\r\n\t\t\r\n\t\treturn currentSetting;\r\n    };\r\n\r\n    // 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）\r\n    applyCustomDarkModeSettings();\r\n\r\n\t// 显示模式切换按钮🡄添加事件监听\r\n    darkModeTogglebuttonElement.addEventListener('click', () => {\r\n\t\t// 当用户点击「开关」时，获得新的显示模式，写入 localStorage，并在页面上生效\r\n\t\t\r\n\t\tapplyCustomDarkModeSettings(toggleCustomDarkMode());\r\n    });\r\n})();\r\n"]}